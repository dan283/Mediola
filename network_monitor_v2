#!/usr/bin/env python3
"""
Enhanced Network Monitor with Statistics
Uses only Python built-in libraries - monitors local machine connections
"""

import socket
import threading
import time
import struct
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import ttk, scrolledtext
from collections import defaultdict, Counter
import subprocess
import re
import ipaddress


class EnhancedNetworkMonitor:
    def __init__(self, root):
        self.root = root
        self.root.title("Enhanced Network Monitor")
        self.root.geometry("1000x700")

        self.monitoring = False
        self.connections = defaultdict(lambda: {'count': 0, 'first_seen': None, 'last_seen': None, 'suspicious': False})
        self.total_connections = 0
        self.suspicious_connections = 0
        self.normal_connections = 0

        # Suspicious indicators
        self.suspicious_ports = {21, 22, 23, 25, 135, 139, 445, 1433, 3389, 5900, 6667, 9050}
        self.suspicious_ips = set()  # Will be populated with known bad IPs
        self.private_ranges = [
            ipaddress.IPv4Network('192.168.0.0/16'),
            ipaddress.IPv4Network('172.16.0.0/12'),
            ipaddress.IPv4Network('10.0.0.0/8'),
            ipaddress.IPv4Network('127.0.0.0/8')
        ]

        self.setup_ui()
        self.log_message("Network Monitor initialized - monitoring LOCAL MACHINE only")
        self.log_message("Note: This monitors YOUR computer's connections, not entire WiFi network")

    def setup_ui(self):
        # Create notebook for tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)

        # Main monitoring tab
        self.setup_monitoring_tab()

        # Statistics tab
        self.setup_statistics_tab()

        # Control frame at bottom
        control_frame = tk.Frame(self.root)
        control_frame.pack(fill='x', padx=10, pady=5)

        self.start_btn = tk.Button(control_frame, text="Start Monitoring",
                                   command=self.start_monitoring, bg='lightgreen')
        self.start_btn.pack(side='left', padx=5)

        self.stop_btn = tk.Button(control_frame, text="Stop",
                                  command=self.stop_monitoring, bg='lightcoral',
                                  state='disabled')
        self.stop_btn.pack(side='left', padx=5)

        self.clear_btn = tk.Button(control_frame, text="Clear Data",
                                   command=self.clear_data, bg='lightgray')
        self.clear_btn.pack(side='left', padx=5)

        tk.Label(control_frame, text="Scope: Local Machine Only",
                 fg='blue', font=('Arial', 10, 'italic')).pack(side='right', padx=10)

        # Status bar
        self.status_bar = tk.Label(self.root, text="Ready - This monitors YOUR computer's network connections",
                                   relief='sunken', anchor='w')
        self.status_bar.pack(fill='x')

    def setup_monitoring_tab(self):
        monitor_frame = tk.Frame(self.notebook)
        self.notebook.add(monitor_frame, text="Live Monitoring")

        # Stats summary at top
        stats_frame = tk.LabelFrame(monitor_frame, text="Real-time Statistics")
        stats_frame.pack(fill='x', padx=5, pady=5)

        stats_row1 = tk.Frame(stats_frame)
        stats_row1.pack(fill='x', padx=5, pady=2)

        self.total_label = tk.Label(stats_row1, text="Total: 0", font=('Arial', 10, 'bold'))
        self.total_label.pack(side='left', padx=10)

        self.normal_label = tk.Label(stats_row1, text="Normal: 0", fg='green', font=('Arial', 10, 'bold'))
        self.normal_label.pack(side='left', padx=10)

        self.suspicious_label = tk.Label(stats_row1, text="Suspicious: 0", fg='red', font=('Arial', 10, 'bold'))
        self.suspicious_label.pack(side='left', padx=10)

        # Connection list
        list_frame = tk.LabelFrame(monitor_frame, text="Active Connections")
        list_frame.pack(fill='both', expand=True, padx=5, pady=5)

        # Treeview for connections
        self.tree = ttk.Treeview(list_frame,
                                 columns=('Local', 'Remote', 'State', 'Port', 'Status', 'Count', 'Duration'),
                                 show='headings', height=12)

        columns = [
            ('Local', 120, 'Local Address'),
            ('Remote', 140, 'Remote Address'),
            ('State', 80, 'State'),
            ('Port', 60, 'Port'),
            ('Status', 80, 'Status'),
            ('Count', 60, 'Count'),
            ('Duration', 100, 'Duration')
        ]

        for col, width, heading in columns:
            self.tree.heading(col, text=heading)
            self.tree.column(col, width=width)

        # Configure row colors
        self.tree.tag_configure('suspicious', background='#ffcccc')
        self.tree.tag_configure('normal', background='#ccffcc')

        scrollbar = ttk.Scrollbar(list_frame, orient='vertical', command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)

        self.tree.pack(side='left', fill='both', expand=True)
        scrollbar.pack(side='right', fill='y')

        # Log area
        log_frame = tk.LabelFrame(monitor_frame, text="Activity Log")
        log_frame.pack(fill='x', padx=5, pady=5)

        self.log_text = scrolledtext.ScrolledText(log_frame, height=6,
                                                  font=('Courier', 9))
        self.log_text.pack(fill='both', expand=True, padx=5, pady=5)

    def setup_statistics_tab(self):
        stats_frame = tk.Frame(self.notebook)
        self.notebook.add(stats_frame, text="Statistics & Analysis")

        # Summary statistics
        summary_frame = tk.LabelFrame(stats_frame, text="Connection Summary")
        summary_frame.pack(fill='x', padx=5, pady=5)

        self.stats_text = tk.Text(summary_frame, height=8, font=('Courier', 10))
        self.stats_text.pack(fill='both', expand=True, padx=5, pady=5)

        # Port analysis
        port_frame = tk.LabelFrame(stats_frame, text="Port Analysis")
        port_frame.pack(fill='both', expand=True, padx=5, pady=5)

        self.port_tree = ttk.Treeview(port_frame, columns=('Port', 'Protocol', 'Count', 'Status', 'Description'),
                                      show='headings', height=10)

        port_columns = [
            ('Port', 80, 'Port'),
            ('Protocol', 80, 'Protocol'),
            ('Count', 80, 'Count'),
            ('Status', 100, 'Status'),
            ('Description', 200, 'Description')
        ]

        for col, width, heading in port_columns:
            self.port_tree.heading(col, text=heading)
            self.port_tree.column(col, width=width)

        self.port_tree.tag_configure('suspicious_port', background='#ffcccc')
        self.port_tree.tag_configure('normal_port', background='#ccffcc')

        port_scrollbar = ttk.Scrollbar(port_frame, orient='vertical', command=self.port_tree.yview)
        self.port_tree.configure(yscrollcommand=port_scrollbar.set)

        self.port_tree.pack(side='left', fill='both', expand=True)
        port_scrollbar.pack(side='right', fill='y')

        # Refresh button for statistics
        refresh_btn = tk.Button(stats_frame, text="Refresh Statistics",
                                command=self.update_statistics, bg='lightblue')
        refresh_btn.pack(pady=5)

    def is_ip_suspicious(self, ip):
        """Check if an IP address is suspicious"""
        try:
            ip_obj = ipaddress.IPv4Address(ip)

            # Check if it's a private IP (usually not suspicious)
            for private_range in self.private_ranges:
                if ip_obj in private_range:
                    return False, "Private IP"

            # Check against known suspicious IPs (would need a real database)
            if ip in self.suspicious_ips:
                return True, "Known malicious IP"

            # Check if it's in certain suspicious ranges (example)
            # This is simplified - real implementation would use threat intelligence
            if str(ip).startswith(('185.', '91.', '46.', '5.')):  # Some known problematic ranges
                return True, "Potentially suspicious range"

            return False, "External IP"

        except:
            return False, "Invalid IP"

    def is_port_suspicious(self, port):
        """Check if a port is suspicious and return description"""
        port_info = {
            21: ("FTP", "File Transfer Protocol - potentially insecure"),
            22: ("SSH", "Secure Shell - monitor for unauthorized access"),
            23: ("Telnet", "Unencrypted remote access - very insecure"),
            25: ("SMTP", "Email server - monitor for spam/malware"),
            53: ("DNS", "Domain Name System"),
            80: ("HTTP", "Web traffic - unencrypted"),
            135: ("RPC", "Windows RPC - often targeted"),
            139: ("NetBIOS", "Windows file sharing - security risk"),
            443: ("HTTPS", "Secure web traffic"),
            445: ("SMB", "Windows file sharing - high risk"),
            993: ("IMAPS", "Secure email"),
            995: ("POP3S", "Secure email"),
            1433: ("MSSQL", "Database server - secure carefully"),
            3389: ("RDP", "Remote Desktop - common attack target"),
            5900: ("VNC", "Remote desktop - often insecure"),
            6667: ("IRC", "Chat protocol - sometimes used by malware"),
            8080: ("HTTP-Alt", "Alternative web port"),
            9050: ("Tor", "Tor proxy - anonymous traffic")
        }

        if port in self.suspicious_ports:
            service, desc = port_info.get(port, ("Unknown", "Potentially suspicious service"))
            return True, service, desc
        else:
            # Common safe ports
            safe_ports = {
                80: ("HTTP", "Standard web traffic"),
                443: ("HTTPS", "Secure web traffic"),
                53: ("DNS", "Domain name resolution"),
                993: ("IMAPS", "Secure email"),
                995: ("POP3S", "Secure email")
            }
            service, desc = safe_ports.get(port, ("Unknown", "Standard service"))
            return False, service, desc

    def analyze_connection_suspicion(self, local_addr, remote_addr, state, port):
        """Analyze if a connection is suspicious"""
        reasons = []
        suspicious = False

        # Extract IP addresses
        try:
            remote_ip = remote_addr.split(':')[0] if ':' in remote_addr else remote_addr

            # Check IP suspicion
            ip_suspicious, ip_reason = self.is_ip_suspicious(remote_ip)
            if ip_suspicious:
                suspicious = True
                reasons.append(f"Suspicious IP: {ip_reason}")

            # Check port suspicion
            port_suspicious, service, port_desc = self.is_port_suspicious(port)
            if port_suspicious:
                suspicious = True
                reasons.append(f"Suspicious port {port}: {port_desc}")

            # Check connection state
            if state in ['SYN_SENT', 'SYN_RECV']:
                reasons.append("Connection in progress")
            elif state == 'ESTABLISHED' and port_suspicious:
                suspicious = True
                reasons.append("Active connection on suspicious port")

        except Exception as e:
            reasons.append(f"Analysis error: {e}")

        return suspicious, reasons

    def log_message(self, message):
        """Add message to log with timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)

    def get_network_connections(self):
        """Get current network connections using netstat"""
        try:
            # Run netstat command
            if hasattr(subprocess, 'run'):
                result = subprocess.run(['netstat', '-an'], capture_output=True, text=True, timeout=10)
                output = result.stdout
            else:
                # Fallback for older Python versions
                import os
                output = os.popen('netstat -an').read()

            return self.parse_netstat_output(output)

        except Exception as e:
            self.log_message(f"Error getting connections: {e}")
            return []

    def parse_netstat_output(self, output):
        """Parse netstat output to extract connection info"""
        connections = []
        lines = output.split('\n')

        for line in lines:
            line = line.strip()
            if not line or 'Proto' in line or 'Active' in line or line.startswith('tcp'):
                # Skip headers and some formats
                pass

            parts = line.split()
            if len(parts) >= 4:
                try:
                    protocol = parts[0].upper()
                    local_addr = parts[1] if len(parts) > 1 else "unknown"
                    remote_addr = parts[2] if len(parts) > 2 else "unknown"
                    state = parts[3] if len(parts) > 3 else "unknown"

                    # Extract port from remote address
                    port = 0
                    try:
                        if ':' in remote_addr:
                            port = int(remote_addr.split(':')[-1])
                    except:
                        pass

                    # Filter for TCP connections (most interesting for security)
                    if protocol in ['TCP', 'TCP4', 'TCP6'] and remote_addr != '0.0.0.0:*':
                        connections.append((local_addr, remote_addr, state, port))

                except (IndexError, ValueError):
                    continue

        return connections

    def monitor_network(self):
        """Main monitoring loop"""
        while self.monitoring:
            try:
                connections = self.get_network_connections()
                current_time = datetime.now()

                # Reset counters
                active_connections = set()

                for local, remote, state, port in connections:
                    key = f"{local} -> {remote}"
                    active_connections.add(key)

                    # Check if this is a new connection
                    if key not in self.connections:
                        self.connections[key]['first_seen'] = current_time
                        self.connections[key]['count'] = 1

                        # Analyze suspicion
                        suspicious, reasons = self.analyze_connection_suspicion(local, remote, state, port)
                        self.connections[key]['suspicious'] = suspicious
                        self.connections[key]['reasons'] = reasons
                        self.connections[key]['state'] = state
                        self.connections[key]['port'] = port

                        if suspicious:
                            self.log_message(f"🚨 SUSPICIOUS: {key} - {', '.join(reasons)}")
                        else:
                            self.log_message(f"✅ New connection: {key}")
                    else:
                        self.connections[key]['count'] += 1

                    self.connections[key]['last_seen'] = current_time
                    self.connections[key]['state'] = state
                    self.connections[key]['port'] = port

                # Remove old connections (not seen in last 30 seconds)
                cutoff_time = current_time - timedelta(seconds=30)
                keys_to_remove = []
                for key, data in self.connections.items():
                    if data['last_seen'] < cutoff_time:
                        keys_to_remove.append(key)

                for key in keys_to_remove:
                    del self.connections[key]

                # Update counters
                self.total_connections = len(self.connections)
                self.suspicious_connections = sum(1 for conn in self.connections.values() if conn['suspicious'])
                self.normal_connections = self.total_connections - self.suspicious_connections

                # Update UI
                self.root.after(0, self.update_display)

                time.sleep(3)  # Update every 3 seconds

            except Exception as e:
                self.log_message(f"Monitoring error: {e}")
                time.sleep(5)

    def update_display(self):
        """Update the display with current data"""
        # Clear tree
        for item in self.tree.get_children():
            self.tree.delete(item)

        # Add current connections
        for conn_key, conn_data in self.connections.items():
            try:
                # Parse connection key
                local, remote = conn_key.split(' -> ')

                # Calculate duration
                if conn_data['first_seen']:
                    duration = datetime.now() - conn_data['first_seen']
                    duration_str = f"{duration.total_seconds():.0f}s"
                else:
                    duration_str = "Unknown"

                # Determine status
                status = "SUSPICIOUS" if conn_data['suspicious'] else "NORMAL"
                tag = 'suspicious' if conn_data['suspicious'] else 'normal'

                # Insert into tree
                self.tree.insert('', 'end', values=(
                    local,
                    remote,
                    conn_data.get('state', 'UNKNOWN'),
                    conn_data.get('port', 0),
                    status,
                    conn_data['count'],
                    duration_str
                ), tags=(tag,))

            except Exception as e:
                continue

        # Update stats labels
        self.total_label.config(text=f"Total: {self.total_connections}")
        self.normal_label.config(text=f"Normal: {self.normal_connections}")
        self.suspicious_label.config(text=f"Suspicious: {self.suspicious_connections}")

        # Update statistics tab if it's visible
        if self.notebook.index(self.notebook.select()) == 1:  # Statistics tab
            self.update_statistics()

    def update_statistics(self):
        """Update the statistics tab"""
        # Update summary text
        self.stats_text.delete(1.0, tk.END)

        stats_summary = f"""NETWORK CONNECTION STATISTICS
{'=' * 50}

Total Active Connections: {self.total_connections}
Normal Connections: {self.normal_connections} ({(self.normal_connections / max(self.total_connections, 1) * 100):.1f}%)
Suspicious Connections: {self.suspicious_connections} ({(self.suspicious_connections / max(self.total_connections, 1) * 100):.1f}%)

SCOPE: This monitors only YOUR computer's network connections
- Not monitoring other devices on WiFi network
- Shows outbound connections from your machine
- Shows inbound connections to your machine

CONNECTION BREAKDOWN:
"""

        # Analyze by state
        state_counts = Counter(conn['state'] for conn in self.connections.values())
        for state, count in state_counts.most_common():
            stats_summary += f"  {state}: {count}\n"

        stats_summary += "\nSUSPICIOUS ACTIVITY REASONS:\n"
        reason_counts = Counter()
        for conn in self.connections.values():
            if conn['suspicious']:
                for reason in conn.get('reasons', []):
                    reason_counts[reason] += 1

        for reason, count in reason_counts.most_common():
            stats_summary += f"  {reason}: {count} connections\n"

        self.stats_text.insert(1.0, stats_summary)

        # Update port analysis
        for item in self.port_tree.get_children():
            self.port_tree.delete(item)

        port_counts = Counter(conn['port'] for conn in self.connections.values())
        for port, count in port_counts.most_common():
            suspicious, service, description = self.is_port_suspicious(port)
            status = "SUSPICIOUS" if suspicious else "NORMAL"
            tag = 'suspicious_port' if suspicious else 'normal_port'

            self.port_tree.insert('', 'end', values=(
                port, service, count, status, description
            ), tags=(tag,))

    def start_monitoring(self):
        """Start network monitoring"""
        if not self.monitoring:
            self.monitoring = True
            self.start_btn.config(state='disabled')
            self.stop_btn.config(state='normal')
            self.status_bar.config(text="Monitoring your computer's network connections...")

            self.log_message("Network monitoring started")
            self.log_message("Monitoring LOCAL MACHINE connections only")

            # Start monitoring thread
            self.monitor_thread = threading.Thread(target=self.monitor_network, daemon=True)
            self.monitor_thread.start()

    def stop_monitoring(self):
        """Stop network monitoring"""
        self.monitoring = False
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        self.status_bar.config(text="Monitoring stopped")

        self.log_message("Network monitoring stopped")

    def clear_data(self):
        """Clear all data"""
        self.connections.clear()
        self.total_connections = 0
        self.suspicious_connections = 0
        self.normal_connections = 0

        self.log_text.delete(1.0, tk.END)
        self.stats_text.delete(1.0, tk.END)

        for item in self.tree.get_children():
            self.tree.delete(item)
        for item in self.port_tree.get_children():
            self.port_tree.delete(item)

        self.update_display()
        self.log_message("All data cleared")


def main():
    root = tk.Tk()
    app = EnhancedNetworkMonitor(root)

    def on_closing():
        app.stop_monitoring()
        root.destroy()

    root.protocol("WM_DELETE_WINDOW", on_closing)

    try:
        root.mainloop()
    except KeyboardInterrupt:
        app.stop_monitoring()


if __name__ == "__main__":
    main()
